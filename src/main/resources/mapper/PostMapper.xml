<!-- PostMapper.xml -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.PostMapper">
    <select id="getStatusPublicPost" resultType="com.example.demo.domain.Post">
        select title
             , content
             , view_count
          from posts
         where status = 'public'
    </select>

    <select id="getUserPost" resultType="com.example.demo.domain.Post">
        select title
             , created_at
          from posts
         where user_id = #{id}
    </select>

    <select id="getMostViewPost" resultType="com.example.demo.domain.Post">
        select title, view_count
          from posts
      order by view_count desc
   fetch first #{limit} rows only
    </select>

    <select id="getCategoryPost" resultType="com.example.demo.domain.Post">
        select po.title
             , po.content
          from postcategories 	pc
    inner join posts 			      po
            on po.post_id 		  = pc.post_id
         where pc.category_id 	= #{categoryid}
    </select>

    <select id="getPostCountByUser" resultType="com.example.demo.model.post.dto.PostCountByUserDto">
        select user_id
             , count(*)  post_count
          from posts
      group by user_id
    </select>

    <select id="getUserLatestPost" resultType="com.example.demo.domain.Post">
            select title
                 , content
                 , created_at
              from posts
             where user_id = #{postId}
          order by created_at desc
       fetch first #{limit} rows only
    </select>

    <select id="getCommentCountByPost" resultType="com.example.demo.model.post.dto.PostCommentCountDto">
        select po.post_id
             , po.title
             , count(co.comment_id) comment_count
          from posts        po
     left join comments     co
            on co.post_id	  = po.post_id
      group by po.post_id
             , po.title
    </select>

    <select id="getCategoryMostViewPost" resultType="com.example.demo.domain.Post">
      select po.title
           , po.view_count
        from postcategories pc
  inner join posts          po
          on po.post_id 		= pc.post_id
       where pc.category_id = #{categoryId}
    order by po.view_count desc
 fetch first #{limit} rows only
    </select>

  <select id="getPreMonthPost" resultType="com.example.demo.domain.Post">
    select title
         , created_at
      from posts
     where created_at >= add_months(sysdate, -#{month})
  </select>

  <select id="getCustomPost" parameterType="map" resultType="com.example.demo.domain.Post">
    select post_id
         , user_id
         , title
         , content
         , status
         , view_count
         , created_at
         , updated_at
      from posts
    <if test="orderByForm.orderBy != null and !orderByForm.orderBy.isEmpty()">
  order by
      <foreach collection="orderByForm.orderBy" index="key" item="value" separator=",">
           ${key} ${value}
      </foreach>
    </if>
    offset #{offset} rows fetch next #{page} rows only
  </select>






  <select id="getPostById" parameterType="Long" resultType="com.example.demo.domain.Post">
        SELECT * FROM posts WHERE post_id = #{postId}
    </select>

    <select id="getAllPosts" resultType="com.example.demo.domain.Post">
        SELECT * FROM posts
    </select>

    <insert id="createPost" parameterType="com.example.demo.domain.Post">
        INSERT INTO posts (post_id, user_id, title, content, status, view_count) VALUES (#{postId},#{userId},#{title}, #{content}, #{status} , #{viewCount})
    </insert>

    <update id="updatePost" parameterType="com.example.demo.domain.Post">
        UPDATE posts SET title = #{title}, content = #{content} WHERE post_id = #{postId}
    </update>

    <delete id="deletePost" parameterType="Long">
        DELETE FROM posts WHERE post_id = #{postId}
    </delete>
</mapper>